@using Volo.Abp.Validation.StringValues
@using Microsoft.Extensions.Localization
@namespace Secyud.Abp.Components.FeatureManagement
@inherits AbpFeatureManagementComponentBase

<PModal @bind-Value="ModalVisible"
        FormModel="Features"
        OnCancel="@CloseModal"
        OnSave="SaveAsync"
        Title="@L["Features"]">
    @if (Groups == null || !Groups.Any())
    {
        <span>@L["NoFeatureFoundMessage"]</span>
    }
    else
    {
        <MTabs @bind-SelectedTab="@SelectedTabName" Vertical>
            @foreach (var group in Groups)
            {
                <MTab Value="@GetNormalizedGroupName(group.Name)">
                    @group.DisplayName
                </MTab>
            }
        </MTabs>
        <MTabsItems @bind-Value="SelectedTabName">
            @for (var i = 0; i < Groups.Count; i++)
            {
                var index = i;
                <MTabItem Value="@GetNormalizedGroupName(Groups[index].Name)">
                    <MCard>
                        <MCardTitle>
                            @Groups[index].DisplayName
                        </MCardTitle>

                        <MCardText>
                            @foreach (var feature in Groups[index].Features)
                            {
                                var disabled = IsDisabled(feature.Provider.Name);

                                switch (feature.ValueType)
                                {
                                    case FreeTextStringValueType:
                                    {
                                        <MTextField TValue="string"
                                                    Style="@GetFeatureStyles(feature)"
                                                    Disabled="@disabled"
                                                    Label="@feature.DisplayName"
                                                    Value="@feature.Value"
                                                    ValueChanged="@(async v => await OnFeatureValueChangedAsync(v, feature))"
                                                    Hint="@feature.Description"
                                                    PersistentHint/>
                                        break;
                                    }
                                    case SelectionStringValueType type:
                                    {
                                        var items = type.ItemSource.Items.ToList();

                                        <MSelect TValue="string"
                                                 TItem="ISelectionStringValueItem"
                                                 TItemValue="string"
                                                 @bind-Value="@SelectionStringValues[feature.Name]"
                                                 Style="@GetFeatureStyles(feature)"
                                                 Disabled="@disabled"
                                                 Label="@feature.DisplayName"
                                                 Items="@items"
                                                 ItemText="item => CreateStringLocalizer(item.DisplayText.ResourceName).GetString(item.DisplayText.Name)"
                                                 ItemValue="item => item.Value"
                                                 Hint="@feature.Description"
                                                 PersistentHint/>
                                        break;
                                    }
                                    case ToggleStringValueType:
                                    {
                                        <MCheckbox TValue="bool"
                                                   Value="@ToggleValues[feature.Name]"
                                                   ValueChanged="@(async v => await OnSelectedValueChangedAsync(v, feature))"
                                                   Style="@GetFeatureStyles(feature)"
                                                   Disabled="@disabled"
                                                   Label="@feature.DisplayName"
                                                   Hint="@feature.Description"
                                                   PersistentHint/>
                                        break;
                                    }
                                }
                            }
                        </MCardText>
                    </MCard>
                </MTabItem>
            }
        </MTabsItems>
    }
</PModal>