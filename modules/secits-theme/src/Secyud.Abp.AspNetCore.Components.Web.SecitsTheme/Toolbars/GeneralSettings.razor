@using System.Globalization
@using Secyud.Abp.AspNetCore.Styles
@using Secyud.Secits.Blazor.Icons
@using Volo.Abp.Localization

<div class="sc-general-setting" @onclick:stopPropagation>

	@if (ThemeOptions.Value.Styles.Count > 1)
	{
		<div class="setting-icon" id="style">
			<SIcon Class="anim" IconName="@IconProvider.GetIcon(IconName.Laptop)"
			       Click="StyleMenuIconClick"/>
		</div>
	}

	@if (Languages.Count > 1)
	{
		<div class="setting-icon" id="language">
			<span class="s-icon anim" @onclick="LanguageMenuIconClick">
				@CurrentLanguageTwoLetters
			</span>
		</div>
	}

	@GenerateContextMenu()

</div>

@code
{
	protected RenderFragment GenerateContextMenu()
	{
		return
			@<SContextMenu @bind-Visible="ContextMenuVisible" Class="sc-menu" HideMode>
				@if (ThemeOptions.Value.Styles.Count > 1)
				{
					@GenerateStyleMenu()
				}

				@if (Languages.Count > 1)
				{
					@GenerateLanguageMenu()
				}
			</SContextMenu>;
	}

	protected RenderFragment GenerateStyleMenu()
	{
		return __builder =>
		{
			<div class="s-menu outer">
				<div class="menu-item" @onclick="StyleMenuClick">
					<SIcon IconName="@StyleMenuIcon"/>
					<span class="menu-item-text">@L["Appearance"]</span>
					@{
						var icon = StyleMenuVisible ? DownIcon : UpIcon;
						<SIcon @key="icon" IconName="@icon"/>
					}
				</div>
			</div>

			<div class="s-menu inner @(StyleMenuVisible ? "" : "collapsed")">
				@foreach (var style in ThemeOptions.Value.Styles)
				{
					@GenerateStyleSelection(style)
				}
			</div>
		};
	}

	protected RenderFragment GenerateLanguageMenu()
	{
		return __builder =>
		{
			<div class="s-menu">
				<div class="menu-item" @onclick="LanguageMenuClick">
					<SIcon IconName="@LanguageMenuIcon"/>
					<span class="menu-item-text">@L["Language"]</span>
					@{
						var icon = LanguageMenuVisible ? DownIcon : UpIcon;
						<SIcon @key="icon" IconName="@icon"/>
					}
				</div>
			</div>

			<div class="s-menu inner @(LanguageMenuVisible ? "" : "collapsed")">
				@foreach (var language in Languages)
				{
					@GenerateLanguageSelection(language)
				}
			</div>
		};
	}


	protected RenderFragment GenerateStyleSelection(KeyValuePair<string, SecitsThemeStyle> style)
	{
		var selected = CurrentStyle == style.Key;

		return
			@<div class="menu-item @(selected ? "selected" : "")"
			      @onclick="@(() => ChangeThemeAsync(style.Key))">
				<SIcon IconName="@style.Value.Icon"/>
				<span class="menu-item-text ">
					@style.Value.DisplayName.Localize(LocalizerFactory).Value
				</span>
			</div>;
	}

	protected RenderFragment GenerateLanguageSelection(LanguageInfo language)
	{
		var selected = CurrentLanguage == language;
		var culture = new CultureInfo(language.CultureName);
		var languageName = $"{language.DisplayName} / {culture.TwoLetterISOLanguageName.ToUpper()}";

		return
			@<div class="menu-item @(selected ? "selected" : "")"
			      @onclick="@(() => ChangeLanguageAsync(language))">
				<span class="menu-item-text ">
					@languageName
				</span>
			</div>;
	}
}
