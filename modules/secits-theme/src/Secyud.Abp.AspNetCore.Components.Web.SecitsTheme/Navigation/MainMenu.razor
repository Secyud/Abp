@using Secyud.Secits.Blazor.Icons
@using Volo.Abp.UI.Navigation
@inherits Volo.Abp.AspNetCore.Components.AbpComponentBase

<div class="sc-menu" id="main-menu">
    @if (Menu is not null)
    {
        @foreach (var menuItem in Menu.Items.Where(x => x.MenuItem.GroupName.IsNullOrWhiteSpace()))
        {
            <div class="s-menu outer">
                @GenerateMenuItemTree(menuItem)
            </div>
        }

        @foreach (var group in Menu.Menu.Groups)
        {
            var menuItems = Menu.Items.Where(x => x.MenuItem.GroupName == group.Name).ToList();
            if (menuItems.Any())
            {
                <div class="sc-group-menu-item">
                    @group.DisplayName
                </div>
                @foreach (var menuItem in menuItems)
                {
                    <div class="s-menu outer">
                        @GenerateMenuItemTree(menuItem)
                    </div>
                }
            }
        }
    }
</div>


@code{

    protected virtual RenderFragment GenerateMenuItemTree(MenuItemViewModel model)
    {
        return __builder =>
        {
            @GenerateMenuItemOrCustom(model)

            @if (!model.MenuItem.IsLeaf)
            {
                <div id="@model.MenuItem.ElementId"
                     class="s-menu inner @(model.IsOpen ? "" : "collapsed") @model.MenuItem.CssClass">
                    @foreach (var child in model.Children)
                    {
                        @GenerateMenuItemTree(child)
                    }
                </div>
            }
        };
    }

    protected virtual RenderFragment GenerateMenuItemOrCustom(MenuItemViewModel model)
    {
        var customComponentType = model.MenuItem.GetComponentTypeOrDefault();
        if (customComponentType is not null)
        {
            if (!model.MenuItem.IsLeaf)
            {
                return @<DynamicComponent Type="@customComponentType" @onclick="@(() => ToggleMenuAsync(model))"/>;
            }

            if (typeof(ComponentBase).IsAssignableFrom(customComponentType))
            {
                return @<DynamicComponent Type="@customComponentType"/>;
            }
        }

        return GenerateMenuItem(model);
    }


    protected virtual RenderFragment GenerateMenuItemInner(ApplicationMenuItem item) =>
        __builder =>
        {
            if (!item.Icon.IsNullOrEmpty())
            {
                <SIcon IconName="@item.Icon"/>
            }

            <div class="menu-item-text">@item.DisplayName</div>
        };

    protected virtual RenderFragment GenerateMenuItemDrop(MenuItemViewModel model)
    {
        return @<SIcon IconName="@(model.IsOpen ? IconName.DownAngle : IconName.UpAngle)"/>;
    }

}