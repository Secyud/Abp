@attribute [Authorize(TenantsPermissions.Tenants.Default)]
@using Microsoft.AspNetCore.Authorization
@using Secyud.Abp.ObjectExtending
@using Secyud.Secits.Blazor.Icons
@using Secyud.Abp.Features.Components
@namespace Secyud.Abp.Tenants.Components
@inherits AbpCrudPageBase<ITenantAppService, TenantDto, Guid, GetTenantsInput, TenantCreateDto, TenantUpdateDto>

<SCard>
    <Header>
        @L["Tenants"]
        @if (HasCreatePermission)
        {
            <SButton Click="OpenCreateModalAsync">
                <AddTemplate>
                    <SIcon IconName="@IconProvider.GetIcon(IconName.Create)"></SIcon>
                    @L["NewTenant"]
                </AddTemplate>
            </SButton>
        }
    </Header>
    <Body>
    @* ************************* DATA GRID ************************* *@
    <SGrid TValue="TenantDto">
        <DynamicDataSource Items="GetEntitiesAsync"/>
        <EnableIteratorPager/>

        <GridColumn Field="u => u.Id" Caption="@L["Actions"]">
            <ColumnTemplate>
                <SIcon Class="anim"
                       IconName="@IconProvider.GetIcon(IconName.Update)"
                       Click="@(() => OpenUpdateModalAsync(context))"/>
                <SIcon Class="anim"
                       IconName="@IconProvider.GetIcon(IconName.Update)"
                       Click="@(() => FeaturesModal!.OpenAsync(FeatureProviderName, context.Id.ToString(), context.Name))"/>
                <SIcon Class="anim"
                       IconName="@IconProvider.GetIcon(IconName.Delete)"
                       Click="@(() => OpenDeleteModalAsync(context))"/>
            </ColumnTemplate>
        </GridColumn>
        <GridColumn Field="u => u.Name" EnableSorter/>
        <ExtensionTableColumns ModuleName="@TenantsModuleExtensionConsts.ModuleName"
                               EntityName="@TenantsModuleExtensionConsts.EntityNames.Tenant"/>
    </SGrid>
    </Body>
</SCard>

@* ************************* CREATE MODAL ************************* *@
@if (HasCreatePermission)
{
    <SModal @ref="CreateModal">
        <SCard>
            <Header>
                @L["NewTenant"]
                <CloseButton Click="CloseCreateModalAsync"/>
            </Header>
            <Body>
            <SFormLayout EnableValidation ParentValidationForm>
                <FormLayoutItem Title="@($"{L["TenantName"]} *")" ShowValidationMessage>
                    <TextBox TValue="string" @bind-Value="@CreateEntity.Name"/>
                </FormLayoutItem>
                <FormLayoutItem Title="@($"{L["DisplayName:AdminEmailAddress"]} *")" ShowValidationMessage>
                    <TextBox TValue="string" @bind-Value="@CreateEntity.AdminEmailAddress"/>
                </FormLayoutItem>
                <FormLayoutItem Title="@($"{L["DisplayName:AdminPassword"]} *")" ShowValidationMessage>
                    <TextBox TValue="string" @bind-Value="@CreateEntity.AdminPassword"/>
                </FormLayoutItem>
                <ExtensionProperties Entity="@CreateEntity"
                                     ModalType="ExtensionPropertyModalType.CreateModal"/>
            </SFormLayout>
            </Body>
            <Footer>
                <SButton Click="CloseCreateModalAsync" Class="outline">
                    <AddTemplate>
                        @L["Cancel"]
                    </AddTemplate>
                </SButton>
                <SButton Click="CreateEntityAsync">
                    <AddTemplate>
                        @L["Submit"]
                    </AddTemplate>
                </SButton>
            </Footer>
        </SCard>
    </SModal>
}

@* ************************* EDIT MODAL ************************* *@
@if (HasUpdatePermission)
{
    <SModal @ref="UpdateModal">
        <SCard>
            <Header>
                @L["Edit"]
                <CloseButton Click="CloseUpdateModalAsync"/>
            </Header>
            <Body>
            <SFormLayout EnableValidation ParentValidationForm>
                <FormLayoutItem Title="@($"{L["TenantName"]} *")" ShowValidationMessage>
                    <TextBox TValue="string" @bind-Value="@UpdateEntity.Name"/>
                </FormLayoutItem>
                <ExtensionProperties Entity="@UpdateEntity"
                                     ModalType="ExtensionPropertyModalType.UpdateModal"/>
            </SFormLayout>
            </Body>
            <Footer>
                <SButton Click="CloseUpdateModalAsync" Class="outline">
                    <AddTemplate>
                        @L["Cancel"]
                    </AddTemplate>
                </SButton>
                <SButton Click="UpdateEntityAsync">
                    <AddTemplate>
                        @L["Submit"]
                    </AddTemplate>
                </SButton>
            </Footer>
        </SCard>
    </SModal>
}

@if (HasManageFeaturesPermission)
{
    <FeaturesModal @ref="FeaturesModal"/>
}