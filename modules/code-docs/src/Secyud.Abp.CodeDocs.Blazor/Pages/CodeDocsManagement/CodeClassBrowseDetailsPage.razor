@page "/code-docs/browse/{CodeClassId:guid}"
@namespace Secyud.Abp.Pages.CodeDocsManagement
@inherits CodeDocsComponentBase
@if (CodeClassWithDetails is not null)
{
    <MCard Elevation="6">
        <MCardTitle>
            @CodeClassWithDetails.Name
            @if (CodeClassParent is not null)
            {
                @(" : ")
                <a href="@NavUrl(CodeClassParent.Id)" target="_blank">
                    @CodeClassParent.Name
                </a>
            }
        </MCardTitle>
    </MCard>

    <MCard>
        <MCardSubtitle>
            @L["Annotation"]
        </MCardSubtitle>
        <MCardText>
            @CodeClassWithDetails.Annotation
        </MCardText>
    </MCard>

    <MCard>
        <MCardSubtitle>
            @L["Description"]
        </MCardSubtitle>
        <MCardText>
            @CodeClassWithDetails.Description
        </MCardText>
    </MCard>

    <MCard>
        <MCardSubtitle>
            @L["Parameters"]
        </MCardSubtitle>
        <MCardText>
            <MExpansionPanels>
                @foreach (var parameter in CodeClassWithDetails.Parameters)
                {
                    <MExpansionPanel>
                        <MExpansionPanelHeader>
                            <code>
                                @(parameter.IsPublic ? "public" : "private")&nbsp;
                                @if (parameter.TypeId != default)
                                {
                                    var nameValue = CodeClassNameValueList
                                        .First(u => u.Value == parameter.TypeId);

                                    <a href="@NavUrl(parameter.TypeId)" target="_blank">
                                        @nameValue.Name
                                    </a>
                                }
                                &nbsp;
                                @parameter.Name
                            </code>
                        </MExpansionPanelHeader>
                        <MExpansionPanelContent>
                            @parameter.Annotation
                        </MExpansionPanelContent>
                    </MExpansionPanel>
                }
            </MExpansionPanels>
        </MCardText>
    </MCard>

    <MCard>
        <MCardSubtitle>
            @L["Functions"]
        </MCardSubtitle>
        <MCardText>
            <MExpansionPanels>
                @foreach (var function in CodeFunctionsWithDetails)
                {
                    <MExpansionPanel>
                        @{
                            var typeParameters = (
                                from u in function.Parameters
                                join v in CodeClassNameValueList
                                    on u.TypeId equals v.Value
                                select new { Type = v.Name, TypeId = v.Value, u.Name, u.Annotation })
                                .ToList();
                        }
                        <MExpansionPanelHeader>
                            <code>
                                @if (function.ReturnId != default)
                                {
                                    var nameValue = CodeClassNameValueList
                                        .First(u => u.Value == function.ReturnId);
                                    <a href="@NavUrl(function.ReturnId)" target="_blank">
                                        @nameValue.Name
                                    </a>
                                }
                                else
                                {
                                    @("void")
                                }
                                &nbsp;
                                @if (typeParameters.Any())
                                {
                                    foreach (var typeParameter in typeParameters)
                                    {
                                        if (typeParameter != typeParameters.First())
                                            @(", ")
                                        <a href="@NavUrl(typeParameter.TypeId)" target="_blank">
                                            @typeParameter.Type
                                        </a>
                                        @("&nbsp;")
                                        @typeParameter.Name
                                    }
                                }
                                @if (function.IsStatic)
                                {
                                    <MIcon Small Color="orange">
                                        mdi-alpha-s-circle
                                    </MIcon>
                                }
                                @if (function.IsStatic)
                                {
                                    <MIcon Small Color="light-blue">
                                        mdi-alpha-v-circle
                                    </MIcon>
                                }
                            </code>
                        </MExpansionPanelHeader>
                        <MExpansionPanelContent>
                            @foreach (var typeParameter in typeParameters)
                            {
                                <MSubheader>
                                    <code>
                                        @($"{typeParameter.Type} {typeParameter.Name}")
                                    </code>
                                </MSubheader>
                                @typeParameter.Annotation
                            }
                        </MExpansionPanelContent>
                    </MExpansionPanel>
                }
            </MExpansionPanels>
        </MCardText>
    </MCard>
}
else
{
    <MProgressLinear Color="deep-purple accent-4"
                     Indeterminate
                     Rounded
                     Height="6">
    </MProgressLinear>
}