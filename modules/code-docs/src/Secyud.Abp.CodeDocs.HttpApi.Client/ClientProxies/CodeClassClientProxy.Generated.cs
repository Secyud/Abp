// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using SuperCreation.Abp.CodeDocs.Code;
using System.Collections.Generic;

// ReSharper disable once CheckNamespace
namespace SuperCreation.Abp.CodeDocs.Code.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ICodeClassAppService), typeof(CodeClassClientProxy))]
public partial class CodeClassClientProxy : ClientProxyBase<ICodeClassAppService>, ICodeClassAppService
{
    public virtual async Task<List<CodeClassSelectDto>> GetSelectListAsync()
    {
        return await RequestAsync<List<CodeClassSelectDto>>(nameof(GetSelectListAsync));
    }

    public virtual async Task<List<CodeClassSelectDto>> GetBrowseListAsync()
    {
        return await RequestAsync<List<CodeClassSelectDto>>(nameof(GetBrowseListAsync));
    }

    public virtual async Task<bool> CreateAsync(CodeClassCreateUpdateDto input)
    {
        return await RequestAsync<bool>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CodeClassCreateUpdateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<CodeClassDto> GetWithDetailsAsync(Guid id)
    {
        return await RequestAsync<CodeClassDto>(nameof(GetWithDetailsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<CodeClassLookupDto>> GetListAsync(CodeClassGetListDto input)
    {
        return await RequestAsync<PagedResultDto<CodeClassLookupDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CodeClassGetListDto), input }
        });
    }

    public virtual async Task<CodeClassDto> GetAsync(Guid id)
    {
        return await RequestAsync<CodeClassDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<bool> UpdateAsync(CodeClassCreateUpdateDto input)
    {
        return await RequestAsync<bool>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CodeClassCreateUpdateDto), input }
        });
    }
}
