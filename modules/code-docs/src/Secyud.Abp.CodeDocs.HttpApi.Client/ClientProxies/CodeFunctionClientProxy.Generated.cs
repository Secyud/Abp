// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using SuperCreation.Abp.CodeDocs.Code;
using System.Collections.Generic;

// ReSharper disable once CheckNamespace
namespace SuperCreation.Abp.CodeDocs.Code.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(ICodeFunctionAppService), typeof(CodeFunctionClientProxy))]
public partial class CodeFunctionClientProxy : ClientProxyBase<ICodeFunctionAppService>, ICodeFunctionAppService
{
    public virtual async Task<List<CodeFunctionDto>> GetAllWithClassIdAsync(Guid classId)
    {
        return await RequestAsync<List<CodeFunctionDto>>(nameof(GetAllWithClassIdAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), classId }
        });
    }

    public virtual async Task<CodeFunctionDto> GetWithDetailsAsync(Guid id)
    {
        return await RequestAsync<CodeFunctionDto>(nameof(GetWithDetailsAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<bool> CreateAsync(CodeFunctionCreateUpdateDto input)
    {
        return await RequestAsync<bool>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CodeFunctionCreateUpdateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<bool> UpdateAsync(CodeFunctionCreateUpdateDto input)
    {
        return await RequestAsync<bool>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CodeFunctionCreateUpdateDto), input }
        });
    }
}
